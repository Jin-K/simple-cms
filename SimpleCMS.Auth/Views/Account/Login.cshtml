@using System.Linq
@model LoginViewModel
@inject SignInManager<SimpleCMS.Data.Entities.AppUser> SignInManager
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Log in";
}

<h2>@ViewData["Title"]</h2>
<div class="row">
    <div class="col-md-4">
        <section>
            <form id="login_form" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post">
                <h4>Use a local account to log in.</h4>
                <hr />
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Password"></label>
                    <input asp-for="Password" class="form-control" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <div class="checkbox">
                        <label asp-for="RememberMe">
                            <input asp-for="RememberMe" />
                            @Html.DisplayNameFor( m => m.RememberMe )
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-default">Log in</button>
                </div>
                <div class="form-group">
                    <p>
                        <a asp-action="ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a asp-action="Register" asp-route-returnurl="@ViewData["ReturnUrl"]">Register as a new user?</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h4>Use another service to log in.</h4>
            <hr />
            @{
                var loginProviders = ( await SignInManager.GetExternalAuthenticationSchemesAsync() ).ToList();
                if (loginProviders.Count == 0) {
                    <div>
                        <p>
                            There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                            for details on setting up this ASP.NET application to support logging in via external services.
                        </p>
                    </div>
                }
                else {
                    <form asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in loginProviders) {
                                    <button id="external_login_btn" type="submit" class="btn btn-default" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.Name</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync( "_ValidationScriptsPartial" )
    <script>

    var origin = '@ViewData["Origin"]';
    var external_login_param = 'external_login='

    $(function() {
        var masterWnd = window.opener || window.parent || window.top;
        masterWnd.postMessage({
            action  : 'loaded',
            message : JSON.parse(JSON.stringify(window.location))
        }, origin);

        var validationErrors = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewData["ValidationErrors"]));
        if (validationErrors.length) {
            window.top.postMessage({
                action: 'validation_errors',
                message: validationErrors
            }, origin);
        }
    });

    $(window).on('message', function(event) {
        // Check the origin of the data
        var _origin = event.originalEvent.origin;
        var allowedCorsOrigins = @Html.Raw(Json.Serialize(ViewData["AllowedCorsOrigins"] ));

        for (var i = 0; i < allowedCorsOrigins.length; i++) {
            var allowedCorsOrigin = allowedCorsOrigins[i];
            if (~_origin.indexOf(allowedCorsOrigin)) {
                var data = event.originalEvent.data;

                if (!data.action || !data.message) return;

                switch(data.action) {

                    case 'login':
                        var formData = data.message;
                        for(var prop in formData) {
                            var input = $('#' + prop);
                            input.val(formData[prop]);
                            if (input.prop('type') === 'checkbox') input.prop('checked', formData[prop]);
                        }
                        $('#login_form').submit();
                        return;

                    case 'external_login':
                        $('#external_login_btn').trigger('click');
                        return;

                    default:
                        return;

                }
            }
        }

        return;
    });
    </script>
}
